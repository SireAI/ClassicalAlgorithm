一.递归理解
  1.反向遍历
  如果一组元素先进后出，考察相邻两个元素之间的关系，从尾部向头部遍历，可以使用递归，也可以使用栈。
  2.动态规划，考察n项与n-1项或者n-2项。。。之间的关系，类似于数学上的通项公式。在结构上该类型的
  递归问题本质是个树结构，反向遍历的情况是树的特例情况-链表，随着分解的子问题增多，树的子节点也将
  相应的增多，动态规划往往有重复计算相同结果的问题，结果的复用时优化的关键，比如斐波那契数列f(n) = f(n-1)+f(n-2)。
  3.分治
  分治的思想是将一个大问题分解成可解决的子问题和与原问题相似的问题或者全都是与原问题相似的问题，分解
  的相似问题又可以继续分解，将每一步都解决从而解决最终的问题典型的分治如归并排序与快速排序。

二.递归的评价
  1.递归的劣势
  使用递归的方式往往形式上非常简洁优雅，但在效率上效果却不如循环的解决方案。
  从时间复杂度上看，递归往往重复计算了相同的结果，导致性能低下。
  从内存消耗上看，递归依靠方法栈来实现，栈帧本身也有一定的内存消耗，一般语言的方法栈的深度有极限，可能存在栈
  溢出的风险。
  递归的解决方案往往都有对应的循环的解决方案，推荐使用递归来引出思路，然后改造成循环的解决方案。
  2.递归的优势
  递归的解决方案核心优势在简化了问题。
  一个复杂的问题通过递归的子结构重复形式简化成了一个简单问题的解决。正面解决问题是可行的，但是也是
  复杂的。

                                             @Sire 2019.08.09

  =========================================================================


